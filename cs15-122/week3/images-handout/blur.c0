#use <conio>
/* Assumes that pixel is already defined to be an int (pixel.c0) */
/* typedef int pixel; */
#use <util>

int weight(int[] mask, int maskwidth, int flag);
int apply_mask(int[] A, int width, int height,
               int row, int col, int[] mask, int maskwidth);

pixel[] blur (pixel[] pixels, int width, int height,
              int[] mask, int maskwidth)
//@requires width > 0 && height > 0 && width <= int_max() / height;
//@requires \length(pixels) == width*height;
//@ensures \result != pixels;
//@ensures \length(\result) == \length(pixels);
{
  pixel[] B = alloc_array(pixel, width*height);

  for (int j = 0; j < width; j++)
    //@loop_invariant 0 <= j;
    {
      for (int i = 0; i < height; i++)
        //@loop_invariant 0 <= i;
        {
          //@assert 0 <= j && j < width && 0 <= i && i < height;
          int index = get_index(i, j, width, height);
          //printint(i); printint(j);printint(index);println("");

          //@assert 0 <= index && index < \length(pixels);
          //@assert \length(pixels) == \length(B);

          B[index] = apply_mask(pixels, width, height,
                                i, j, mask, maskwidth);

        }
    }

  return B;
}

int apply_mask(int[] A, int width, int height, int row,
               int col, int[] mask, int maskwidth)
//@requires maskwidth*maskwidth == \length(mask);
{
  int rs = 0;
  int gs = 0;
  int bs = 0;
  int index = get_index(row, col, width, height);
  // The span of a mask. Ex. maskwidth = 5, span = 2.
  int span = maskwidth / 2;

  // Index for the mask.
  int k = 0;
  int weight = 0;

  for (int i = row-span; i < row+span+1; i++)
  {
    for (int j = col - span; j < col+span+1; j++)
    {
       if (j >= 0 && i >= 0 && j < width && i < height){
         rs += get_red(A[get_index(i,j,width,height)]) * mask[k];
         gs += get_green(A[get_index(i,j,width,height)]) * mask[k];
         bs += get_blue(A[get_index(i,j,width,height)]) * mask[k];

         weight += mask[k];
       }
       k++;
    }
  }
  
  int alpha = get_alpha(A[index]);
  int r = rs/weight;
  int g = gs/weight;
  int b = bs/weight;
  
  return make_pixel(alpha, r, g, b);
}